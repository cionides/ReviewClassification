package features;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * This class is used to build a "features table" for each Review instance
 * in the Yelp test set.
 * 
 * @author cionides
 */
public class TestSetFeatureLoader {

    /**
     * Stores the Review's review id as the key and the Features object as the value.
     */
    public static HashMap<String, Features> reviewFeatures = new HashMap<String, Features>();
   
    /**
     * ArrayList containing the top noun phrases that a useful review has. 
     */
    public static ArrayList<String> topNP = new ArrayList<String>();
    
    /**
     * ArrayList of stopwords to be removed from a Review instance's text.
     */
    public static ArrayList<String> stopWords = new ArrayList<String>();   

    public static void main(String[] args) {
        //method calls
        readUtilFiles();     
        readReviewFeatures();
        printReviewFeatures();
        
    }
    
    /**
     * Outputs the Features Table for the test set of the Yelp data.
     * Each Review instance is a row(a Feature object), and every column 
     * is field in the Feature object. This file will be used as input to generate
     * predictions in RapidMiner.
     */
    public static void printReviewFeatures() {
        try {
            
            File file = new File("review_feauturesTest.txt");

            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }
            
            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
    
            for (String rid : reviewFeatures.keySet()) {
                bw.write(reviewFeatures.get(rid).toString());
                bw.newLine();
            }
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Reads in the top noun phrases and list of stopwords.
     * It stores the values in class level structures, topNP and stopWords.
     */
    public static void readUtilFiles() {
        try {
            File f = new File("top_np.txt");
            File sw = new File("stopwords.txt");
            BufferedReader in = new BufferedReader(new FileReader(f));
            BufferedReader sIn = new BufferedReader(new FileReader(sw));
            String line = null;
            String swLine = null;

            while ((line = in.readLine()) != null) {
                topNP.add(line);
            }
            //read the stop words in
            while ((swLine = sIn.readLine()) != null) {
                stopWords.add(swLine);
            }

        } catch (Exception e) {
        }
    }

    /**
     * Reads in the Review objects previously generated by the Review Processor,
     * application and tagged by the StanfordCore NLP POS tagger, and parsed by XMLParser.
     * 
     */
    public static void readReviewFeatures() {
        //int count = 0;
        try {
            File f = new File("review_object.txt");
            BufferedReader in = new BufferedReader(new FileReader(f));
            String line = null;

            while ((line = in.readLine()) != null) {            
                //count++;
                String[] reviewTokens = line.split("\\t");
                String rid = reviewTokens[0];
                String bid = reviewTokens[1];
                int strs = Integer.parseInt(reviewTokens[2]);
                String txt = reviewTokens[3];

                int len = getReviewLen(txt);

                ArrayList<Integer> np = getNPList(txt);
                Features ft = new Features(strs, np, bid, len);
                reviewFeatures.put(rid, ft);                 
                
            }
        } catch (Exception e) {
        }
    }

    /**
     * Loops through the list of top noun phrases and checks to see if the Review text
     * contains that noun phrase, if so it will set the bit representing that noun phrase.
     * 
     * @param text is the Review instance's text
     * @return the bit vector representing the presence 
     * of top noun phrases in the Review text.
     */
    public static ArrayList<Integer> getNPList(String text) {
        ArrayList<Integer> isNP = new ArrayList<Integer>();
        for (String n : topNP) {
            if (text.contains(n)) {
                isNP.add(1);
            } else {
                isNP.add(0);
            }
        }
        return isNP;
    }

    /**
     * Removes all stopwords from the review content, 
     * than gets the remaining length. 
     * 
     * @param text the Review text
     * @return length of non-stopword tokens in a Review
     */
    public static int getReviewLen(String text) {
        ArrayList<String> reviewTokens = new ArrayList<String>();
        String[] tokens = text.split(" ");
        for (String t : tokens) {
            if (stopWords.contains(t)) {
                t = t.replace(t, "");
            }
            if (!t.isEmpty()) {
                reviewTokens.add(t);
            }
        }
        int len = reviewTokens.size();
        return len;
    }
}

